#*************************************************************
# g4emma_input_setup.py
#
# Nad√®ge Pulgar-Vidal
# 2017-Oct-03
#
# Some simple functions to set up the input, folders and files
# needed to run the EMMA Geant 4 Simulation (EMMAapp)
#*************************************************************

#===========================
# IMPORTS
#===========================
from shlex import quote
import subprocess as sp
from pathlib import Path


#===========================
# FUCNTIONS
#===========================

#---------------------------------------------------
# sanitize_input_dict
# PARAMETERS: The dicitonary generated by the Django form (cleaned_data)
# PURPOSE: Properly escape/quote shell metacharacters
#---------------------------------------------------
def sanitize_input_dict(form_dict):
    if isinstance(form_dict, dict):
        for k in form_dict:
            if isinstance(form_dict[k], str):
                form_dict[k] = quote(form_dict[k])
    else:
        # TODO: raise an error if not dictionary?


#---------------------------------------------------
# setup_unique_userdir
# PARAMETERs: The location of the user directory (no trailing '/'' required)
# RETURNS: The name of the unique user dir that was
#          created
# PURPOSE: Setup unique directories so different users
#          running the simulation won't interfere with
#          each other
#---------------------------------------------------
def setup_unique_userdir(user_dirs_path):
    # This should work assuming that PIDs are unique during
    # the entire runtime of the server. This may cause problems
    # if the server is restarted but the goal is to have pretty
    # stringent clean up so this should hopefully not be a problem

    # Get a unique name
    userdir = "{}/UserDir_{}".format(user_dirs_path, sp.check_output("ps | grep ps | sed -r 's/([0-9]*).*/\1/'"), shell=True)

    # Setup the directory
    if !Path(userdir).exists():
        Path(userdir).mkdir()

    else:
        userdir = none

    # The subdirectories will be created when and where needed (where input files are written and in the wrapper script)

    return userdir


#---------------------------------------------------
# write_input_files
# PARAMETERS: The user directory to place the files in
#             and the dictionary containing cleaned
#             user input
# PURPOSE: Set up the input files in the specified directory
#---------------------------------------------------
def write_input_files(userdir, form_dict):
    
