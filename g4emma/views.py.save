from django.http import Http404, HttpResponse, HttpResponseRedirect
from django.shortcuts import render, redirect
import g4emma.forms as G4Forms
import subprocess as sp
from pathlib import Path
import g4emma.g4emma_input_setup as G4ISetup
from django.conf import settings
from os import environ
from channels import Channel
from django.core import serializers
from pathlib import Path
from os import environ
import logging
#######################################################################
# Packages for Tools:
#######################################################################
import numpy as np
from scipy.optimize import fsolve
from scipy.integrate import cumtrapz
from scipy.interpolate import interp1d
import scipy.special as special
import scipy.integrate as integrate
import g4emma.charge_state.charge_state_plotter as cs
import g4emma.energy_loss.srim as sr
from g4emma.charge_state.nuclear_tools import U
import g4emma.multiple_scattering.multiple_scattering as ms
import io, urllib, base64
from .transmission_efficiency import transmission_efficiency_func
from django import forms
#######################################################################

stdlogger = logging.getLogger('django')


def home(request):
    stdlogger.info("Call to home view")
    return render(request, 'g4emma/home.html')

def about(request):
    stdlogger.info("Call to about view")
    return render(request, 'g4emma/about.html')

def manual(request):
    stdlogger.info("Call to manual view")
    return render(request, 'g4emma/manual.html')

def simulation(request):
    stdlogger.info("Call to simulation view")
    results = "" #if there has been no post request, there are no results

    forms_list = [G4Forms.AlphaSourceChoiceForm,
    G4Forms.AlphaSourceForm,
    G4Forms.BeamForm,
    G4Forms.BeamEmittanceChoiceForm,
    G4Forms.BeamEmittanceForm,
    G4Forms.CentralTrajectoryChoiceForm,
    G4Forms.CentralTrajectoryForm,
    G4Forms.ReactionChoiceForm,
    G4Forms.ReactionForm,
    G4Forms.TargetChoiceForm,
    G4Forms.TargetForm,
    G4Forms.TargetElementsForm,
    G4Forms.Degrader1ChoiceForm,
    G4Forms.Degrader1Form,
    G4Forms.Degrader1ElementsForm,
    G4Forms.Degrader2ChoiceForm,
    G4Forms.Degrader2Form,
    G4Forms.Degrader2ElementsForm,
    G4Forms.Slit1ChoiceForm,
    G4Forms.Slit1Form,
    G4Forms.Slit2ChoiceForm,
    G4Forms.Slit2Form,
    G4Forms.Slit3ChoiceForm,
    G4Forms.Slit3Form,
    G4Forms.Slit4ChoiceForm,
    G4Forms.Slit4Form,
    G4Forms.MWPCForm,
    G4Forms.IonChamberChoiceForm,
    G4Forms.IonChamberForm
    ]

    # if a form was submitted (using POST)
    if request.method == 'POST':
        stdlogger.info("POST request in simulation view")
        forms_are_all_valid = True

        for index, input_form in enumerate(forms_list):
            #setup the forms
            forms_list[index] = input_form(request.POST)

            #test their validity (false if any form is not valid)
            forms_are_all_valid = forms_are_all_valid and forms_list[index].is_valid()


        if forms_are_all_valid:
            stdlogger.info("Forms are all valid")
            sim_params = {} #setup a blank start

            for input_form in forms_list:
                #agglomerate all the forms' input into one dictionary
                sim_params.update(input_form.cleaned_data)

            # Do some cleanup before adding another user dir
            stdlogger.info("Starting cleanup of old user directories")
            G4ISetup.cleanup_old_userdirs()

            # Setup a user directory, save its path
            user_dirs_path = settings.DATA_DIRS
            userdir = G4ISetup.setup_unique_userdir(user_dirs_path)
            userdir_path = "{}{}".format(user_dirs_path, userdir)

            stdlogger.info("Unique user dir created: " + userdir_path)


            # Overlay the user input on a set of default values so that we have a complete input set
            sim_params = G4ISetup.merge_with_defaults(sim_params)
            stdlogger.info("User params overlayed on defaults")


            # write to input files
            G4ISetup.write_input_files(userdir_path, sim_params)
            stdlogger.info("User input written to input files")

            # Build call to simulation wrapper
            wrapper_path = environ['G4EMMA_WRAPPER']
            command = " ".join((wrapper_path, environ['G4EMMA_SIM_PATH'], userdir_path + "/"))  #this last slash is important!!!

            # Store data in the session (everything the sim start consummer needs)
            request.session['cmd'] = command
            request.session['userdir'] = userdir
            request.session['userdir_path'] = userdir_path

            # The forms are not JSON serializable
            # TODO Fix this...
            # request.session['forms_list'] = data


            stdlogger.info("About to call simulation wrapper: "+command)

            # Send sim start msg on that consummer's channel
            Channel("sim_start_channel").send({
                'text': "start",
                'cmd': command,
                'userdir': userdir,
            })

            # There are multiple return statements in this function
            return redirect('progress')

        # forms are not all valid so send users back
        else:
            return render(request, 'g4emma/simulation.html', {'forms_list': forms_list})


    # If not POST
    else:
        # If rigidities.dat exists in this branch it means a simulation
        # error occured and we need to display it to the user
        if ('userdir_path' in request.session and
            Path(request.session['userdir_path']+"/Results/rigidities.dat").exists()):
            # let user know that something went wrong (give some ideas of what it could be)
            err_msg = ("An error occured when trying to run the simulation. Check that elements chosen are possible, "
            "and that the magnetic and electric rigidities determined by central "
            "trajectory parameters do not exceed maximum allowed values.\n\n")

            stdlogger.info("Checking the rigidities file for error msgs")

            rigidity_err_msgs = ""
            # read rigidities file and set form errors render form
            with open(request.session['userdir_path']+"/Results/rigidities.dat", 'r') as r_file:
                magnetic_rigidity = r_file.readline() #the first two lines are constant
                electric_rigidity = r_file.readline()
                # then will be 2-4 warning/error lines
                rigidity_err_msgs = r_file.read()

                rigidity_err_msgs = "{}\n{}\n{}".format(magnetic_rigidity,
                electric_rigidity,
                rigidity_err_msgs)

            # If we've gotten this far we should clear the http session so that
            # the next request for a clean form doesn't get misinterpreted as
            # an errored form

            # pull out what we need
            # TODO Fix non-JSON-serializable forms problem
            # forms_list = request.session.pop('forms_list', {})
            for index, input_form in enumerate(forms_list):
                #setup the forms
                forms_list[index] = input_form()

            # then clear away the rest
            request.session.clear()

            # There are multiple return statements in this function
            return render(request, 'g4emma/simulation.html',
                {'forms_list': forms_list, 'general_err_msg': err_msg, 'rigidity_err_msg': rigidity_err_msgs})

        # No rigidities.dat => no error => new empty form
        else:
            for index, input_form in enumerate(forms_list):
                #setup the forms
                forms_list[index] = input_form()


    # There are multiple return statements in this function
    return render(request, 'g4emma/simulation.html', {'forms_list': forms_list})


def tools(request):
    stdlogger.info("Call to tools view")
    return render(request, 'g4emma/tools.html')

def rigidity(request):
    stdlogger.info("Call to rigidity view")
    Rb = 0.0
    Re = 0.0
    if request.method == 'POST':
        form_rig = G4Forms.RigidityForm(request.POST)
        if form_rig.is_valid():
            rig_params = form_rig.cleaned_data
            m = float(rig_params['rig_nucleon_num'])*931.494
            p = np.sqrt((float(rig_params['rig_kinetic_e']) + m)**2 - m**2)
            v = p/(float(rig_params['rig_kinetic_e']) + m)
            Rb = (p*5.34428e-22)/(float(rig_params['rig_charge_state'])*1.60217e-19)
            Re = p*v/(float(rig_params['rig_charge_state']))
            return render(request, 'g4emma/tools/rigidity.html', {'form': form_rig, 'electric_rig': round(Re,5), 'magnetic_rig': round(Rb,5)})
    else:
        form_rig = G4Forms.RigidityForm()
    return render(request, 'g4emma/tools/rigidity.html', {'form': form_rig, 'electric_rig': Re, 'magnetic_rig': Rb})

def transmission_efficiency_view(request):
    if request.method =='POST':
	form = UploadFileForm(request.POST, request.FILES)
	if form.is_valid():
	   file1 = request.FILES['file1']
	   file2 = request.FILES['file2']

	   results = transmission_efficiency_func(file1,file2)
	   return render(request, 'g4emma/tools/transmission_efficiency.html', {'results': results})
    else:
	form = UploadFileForm()
    return render(request, 'g4emma/tools/transmission_efficiency.html', {'form': form})

def multiple_scattering_info(request):
    stdlogger.info("Call to multiple_scattering_info view")
    return render(request, 'g4emma/tools/multiple_scattering_info.html')


def multiple_scattering(request): 
    stdlogger.info("Call to multiple_scattering view")
    sigma_rad = 0.0
    sigma_deg = 0.0
    FWHM_rad = 0.0
    marion_FWHM_deg = 0.0
    B = 0.0
    weighted_alpha = 0.0
    sigmund_FWHM_deg_1 = 0.0
    sigmund_FWHM_deg_2 = 0.0 
    sigmund_tau = 0.0
    born_param = 0.0
    if request.method == 'POST':
        form_ms = G4Forms.MultipleScatteringForm(request.POST)
        if form_ms.is_valid():
            form_params = form_ms.cleaned_data
            E = float(form_params['ms_kinetic_e'])
            M = float(form_params['ms_rest_mass'])
            z = float(form_params['ms_incident_proton_num'])
            Z = float(form_params['ms_target_proton_num'])
            Mt = float(form_params['ms_target_rest_mass'])
            A = float(form_params['ms_target_nucleon_num'])
            t = float(form_params['ms_target_density'])
		           
            def born_param(E,A,z,Z): 
                E_A = E/A
                beta = np.sqrt(1-(1/(1+(E_A/931.494061)))**2)
                born_param = z*Z/(137*beta)
                return born_param

            born_param = born_param(E,M,z,Z)
 
            # for Marion and Zimmerman quantum model
            M1 = M*931.494095 #convert amu to MeV/c**2
            t1 = t*1e-6  #convert μg/cm**2 to g/cm**2
            params = ms.set_parameters_marion(E,M1,z,Z,A,t1)
               #model eats KE in Mev, M in MeV/c**2, z,Z,A in numbers and t in g/cm**2
            Fref = ms.F(0,params.xc_,params.B_,params.gamma_)
            def F_normed(x): 
                return (1/Fref)*ms.F(x,params.xc_,params.B_,params.gamma_) 
            v2 = np.vectorize(F_normed)
            x = np.arange(0, 6, 0.05) # need this, gaussian_sigma depends on x for interpolation
            sigma_rad = ms.gaussian_sigma(x, v2,params,rad=True)
            sigma_deg = sigma_rad*(180/np.pi)
            FWHM_rad = ms.gaussian_FWHM(sigma_rad)
            marion_FWHM_deg = ms.gaussian_FWHM(sigma_deg)
            sigma_mrad = sigma_rad*1000
            FWHM_mrad = FWHM_rad*1000
            B = params.B_ 

            # for Sigmund and Winterbon classical model
            Mt2 = Mt*1.66054e-24 #amu to grams
            t2 = t*1e-6 #μg/cm**2 to g/cm**2   
            variables = ms.set_parameters_sigmund(E,z,Z,Mt2,t2)  
            sigmund_FWHM_deg_1 = variables.weighted_alpha_[0]*2 # alpha is the half-width
            sigmund_FWHM_deg_1 = sigmund_FWHM_deg_1*(180/np.pi)
            sigmund_FWHM_deg_2 = variables.weighted_alpha_[1]*2
            sigmund_FWHM_deg_2 = sigmund_FWHM_deg_2*(180/np.pi)
            sigmund_tau = variables.tau_     
             
         
            return render(request, 'g4emma/tools/multiple_scattering.html', {'form': form_ms, 'marion_FWHM_deg': round(marion_FWHM_deg,5), 'B_param': round(B,2), 'sigmund_FWHM_deg_1': round(sigmund_FWHM_deg_1,5), 'sigmund_FWHM_deg_2': round(sigmund_FWHM_deg_2,5), 'sigmund_tau': round(sigmund_tau,2), 'born_param': round(born_param,2) })
    else:
        form_ms = G4Forms.MultipleScatteringForm()
    return render(request, 'g4emma/tools/multiple_scattering.html', {'form': form_ms, 'marion_FWHM_deg': marion_FWHM_deg, 'B_param': B, 'sigmund_FWHM_deg_1': sigmund_FWHM_deg_1, 'sigmund_FWHM_deg_2': sigmund_FWHM_deg_2, 'sigmund_tau': sigmund_tau, 'born_param': born_param  })



def charge_state(request):
    stdlogger.info("Call to charge_state view")
    if request.method == 'POST':
        form_cs_beam = G4Forms.ChargeStateIonForm(request.POST)
        form_cs_target = G4Forms.ChargeStateTargetForm(request.POST)
        if form_cs_beam.is_valid() and form_cs_target.is_valid():
            beam_params = form_cs_beam.cleaned_data
            target_param = form_cs_target.cleaned_data
            energy_per_nucleon = float(beam_params['cs_kinetic_e'])/float(beam_params['cs_nucleon_num'])
            try:
                fig, qs_ND, sigmas_ND, qs_Shima, sigmas_Shima, qs_Schiw, sigmas_Schiw, x_data, y_ND, y_Shima, y_Schiw = cs.generate_charge_state_plots(float(beam_params['cs_nucleon_num']), beam_params['cs_proton_num'], target_param['cs_T_proton_num'], energy_per_nucleon)
                buf = io.BytesIO()
                fig.savefig(buf,format='png')
                buf.seek(0)
                string = base64.b64encode(buf.read())
                uri = 'data:image/png;base64,' + urllib.parse.quote(string)
                cs_x = []
                cs_y_ND = []
                cs_y_Sh = []
                cs_y_Sc = []
                k = 0
                for xi in x_data:
                    if k % 1 == 0:
                        cs_x.append(round(xi,2))
                        cs_y_ND.append(float('{:0.5e}'.format(y_ND[k])))
                        cs_y_Sh.append(float('{:0.5e}'.format(y_Shima[k])))
                        cs_y_Sc.append(float('{:0.5e}'.format(y_Schiw[k])))
                    k += 1
                request.session["charge_state_x"] = cs_x
                request.session["charge_state_y_ND"] = cs_y_ND
                request.session["charge_state_y_Shima"] = cs_y_Sh
                request.session["charge_state_y_Schiw"] = cs_y_Sc
                return render(request, 'g4emma/tools/charge_state.html', {'beam_form': form_cs_beam, 'target_form': form_cs_target, 'image': uri, 'mu_ND': round(qs_ND[0],4), 'sig_ND': round(sigmas_ND[0],4), 'mu_Shima': round(qs_Shima[0],4), 'sig_Shima': round(sigmas_Shima[0],4), 'mu_Schiw': round(qs_Schiw[0],4), 'sig_Schiw': round(sigmas_Schiw[0],4)})
            except forms.ValidationError:
                return render(request, 'g4emma/tools/charge_state.html', {'beam_form': form_cs_beam, 'target_form': form_cs_target, 'invalid': True})
    else:
        form_cs_beam = G4Forms.ChargeStateIonForm()
        form_cs_target = G4Forms.ChargeStateTargetForm()
    return render(request, 'g4emma/tools/charge_state.html', {'beam_form': form_cs_beam, 'target_form': form_cs_target})

def charge_state_results(request):
    stdlogger.info("Call to charge_state_results view")
    x = request.session["charge_state_x"]
    y_ND = request.session["charge_state_y_ND"]
    y_Shima = request.session["charge_state_y_Shima"]
    y_Schiw = request.session["charge_state_y_Schiw"]
    y_ND_int = cumtrapz(y_ND, x)
    y_Shima_int = cumtrapz(y_Shima, x)
    y_Schiw_int = cumtrapz(y_Schiw, x)
    dx = x[1] - x[0]
    x_bounds = []
    for xi in np.arange(0.5,x[-1]+dx,1):
        x_bounds.append(x.index(xi) - 1)
    y_ND_perc = []
    y_Shima_perc = []
    y_Schiw_perc = []
    y_ND_perc.append((y_ND_int[x_bounds[0]] - y_ND_int[0])*100)
    y_Shima_perc.append((y_Shima_int[x_bounds[0]] - y_Shima_int[0])*100)
    y_Schiw_perc.append((y_Schiw_int[x_bounds[0]] - y_Schiw_int[0])*100)
    k = 0
    for xi in x_bounds:
        if xi == x_bounds[-1]:
            y_ND_perc.append((y_ND_int[-1]-y_ND_int[xi])*100)
            y_Shima_perc.append((y_Shima_int[-1] - y_Shima_int[xi])*100)
            y_Schiw_perc.append((y_Schiw_int[-1] - y_Schiw_int[xi])*100)
        else:
            y_ND_perc.append((y_ND_int[x_bounds[k+1]] - y_ND_int[xi])*100)
            y_Shima_perc.append((y_Shima_int[x_bounds[k+1]] - y_Shima_int[xi])*100)
            y_Schiw_perc.append((y_Schiw_int[x_bounds[k+1]] - y_Schiw_int[xi])*100)
            k += 1
    y_ND_perc = np.array(y_ND_perc)/sum(y_ND_perc)
    y_Shima_perc = np.array(y_Shima_perc)/sum(y_Shima_perc)
    y_Schiw_perc = np.array(y_Schiw_perc)/sum(y_Schiw_perc)
### 220830 K.Pak modified ###
### Charge state results obtained here was the difference of CDF in each bin
### I modified this code to make the result Gaussian PDF
### Temporarily the last charge state has the last number in pre-defined gauss(x) (i.e. y_ND[-1], y_Shima[-1] and y_Schiw[-1])
### e.g. Gaussian(10) -> actually Gaussian(9.99)
    y_ND_perc=[]
    y_Shima_perc=[]
    y_Schiw_perc=[]
    rangeX=np.arange(0,x[-1]+dx,1) 
    for xi in rangeX:
        i = int(xi)
        y_ND_perc.append(y_ND[i*100])
        y_Shima_perc.append(y_Shima[i*100])
        y_Schiw_perc.append(y_Schiw[i*100])
#    y_ND_perc.append(y_ND[-1])
#    y_Shima_perc.append(y_Shima[-1])
#    y_Schiw_perc.append(y_Schiw[-1])
### END ###

    charge_state_data = zip(np.arange(0,x[-1]+dx+1,1), y_ND_perc, y_Shima_perc, y_Schiw_perc)
    return render(request, 'g4emma/tools/charge_state_results.html', {'cs_data': charge_state_data})

def energy_loss(request):
    stdlogger.info("Call to energy_loss view")
    if request.method == 'POST':
        ion_form = G4Forms.EnergyLossIonForm(request.POST)
        target_choice_form = G4Forms.EnergyLossTargetChoiceForm(request.POST)
        pre_choice_form = G4Forms.EnergyLossPreDefinedChoiceForm(request.POST)
        pressure_form = G4Forms.EnergyLossPressureForm(request.POST)
        element_form = G4Forms.EnergyLossSelfDefinedElementForm(request.POST)
        compound_form = G4Forms.EnergyLossSelfDefinedCompoundForm(request.POST)
        density_form = G4Forms.EnergyLossDensityForm(request.POST)
        thickness_form = G4Forms.EnergyLossTargetThicknessForm(request.POST)
        unit_form = G4Forms.EnergyLossTargetThicknessUnitChoiceForm(request.POST)
        forms_list = [ion_form, target_choice_form, pre_choice_form, pressure_form, element_form, compound_form, density_form, thickness_form, unit_form]
        forms_all_valid = True
        for form_i in forms_list:
            forms_all_valid = forms_all_valid and form_i.is_valid()
        if forms_all_valid:
            ion_params = ion_form.cleaned_data
            target_choice = target_choice_form.cleaned_data
            thickness = thickness_form.cleaned_data
            unit = unit_form.cleaned_data
            pre_defined = False
            element = False
            compound = False
            gas = False
            try:
                Target = sr.Material()
                if target_choice['target_material_choice'] == '2':
                    pre_defined_compound = pre_choice_form.cleaned_data
                    pre_defined = True
                    if pre_defined_compound['pre_defined_mat_choice'] == '2':
                        gas = True
                        pressure_data = pressure_form.cleaned_data
                        pressure = pressure_data['el_pressure']
                        Target.isobutane(float(pressure)*U.torr)
                    elif pre_defined_compound['pre_defined_mat_choice'] == '3':
                        Target.mylar()
                    elif pre_defined_compound['pre_defined_mat_choice'] == '4':
                        Target.polyethylene()
                    elif pre_defined_compound['pre_defined_mat_choice'] == '5':
                        Target.CD2()
                    elif pre_defined_compound['pre_defined_mat_choice'] == '6':
                        Target.LiF()
                    elif pre_defined_compound['pre_defined_mat_choice'] == '7':
                        Target.propanediol()
                elif target_choice['target_material_choice'] == '3':
                    chosen_element = element_form.cleaned_data
                    element = True
                    Target.set_element(chosen_element['target_element_proton_num'])
                elif target_choice['target_material_choice'] == '4':
                    chosen_compound = compound_form.cleaned_data
                    target_density = density_form.cleaned_data
                    compound = True
                    Target.set_compound(chosen_compound['target_compound'])
                    Target.set_density(float(target_density['target_compound_density'])*(U.g/U.cm**3))
                if unit['thickness_unit_choice'] == '0':
                    Target.set_thickness(float(thickness['target_thickness']))
                elif unit['thickness_unit_choice'] == '1':
                    Target.set_thickness(float(thickness['target_thickness'])*U.um)
                energy_loss = sr.energy_deposited(ion_params['el_nucleon_num'],ion_params['el_proton_num'], float(ion_params['el_energy'])*U.MeV, Target)
                energy_loss = energy_loss.m
                if float(energy_loss) == float(ion_params['el_energy']):
                    return render(request, 'g4emma/tools/energy_loss.html', {'ion_form':ion_form, 'target_choice_form':target_choice_form, 'pre_choice_form':pre_choice_form,'pressure_form':pressure_form,'element_form':element_form, 'compound_form':compound_form,'density_form':density_form, 'thickness_form':thickness_form, 'unit_form':unit_form, 'energy_loss':round(energy_loss,3), 'pre_defined':pre_defined, 'element':element,'compound':compound,'gas':gas, 'stopped':True})
                else:
                    return render(request, 'g4emma/tools/energy_loss.html', {'ion_form':ion_form, 'target_choice_form':target_choice_form, 'pre_choice_form':pre_choice_form,'pressure_form':pressure_form,'element_form':element_form, 'compound_form':compound_form,'density_form':density_form, 'thickness_form':thickness_form, 'unit_form':unit_form, 'energy_loss':round(energy_loss,3), 'pre_defined':pre_defined, 'element':element,'compound':compound,'gas':gas})
            except forms.ValidationError:
                return render(request, 'g4emma/tools/energy_loss.html', {'ion_form':ion_form, 'target_choice_form':target_choice_form, 'pre_choice_form':pre_choice_form,'pressure_form':pressure_form,'element_form':element_form, 'compound_form':compound_form,'density_form':density_form, 'thickness_form':thickness_form, 'unit_form':unit_form, 'pre_defined':pre_defined, 'element':element,'compound':compound,'gas':gas, 'invalid':True})
    else:
        ion_form = G4Forms.EnergyLossIonForm()
        target_choice_form = G4Forms.EnergyLossTargetChoiceForm()
        pre_choice_form = G4Forms.EnergyLossPreDefinedChoiceForm()
        pressure_form = G4Forms.EnergyLossPressureForm()
        element_form = G4Forms.EnergyLossSelfDefinedElementForm()
        compound_form = G4Forms.EnergyLossSelfDefinedCompoundForm()
        density_form = G4Forms.EnergyLossDensityForm()
        thickness_form = G4Forms.EnergyLossTargetThicknessForm()
        unit_form = G4Forms.EnergyLossTargetThicknessUnitChoiceForm()
    return render(request, 'g4emma/tools/energy_loss.html',{'ion_form': ion_form, 'target_choice_form':target_choice_form, 'pre_choice_form':pre_choice_form,'pressure_form':pressure_form,'element_form':element_form, 'compound_form':compound_form,'density_form':density_form, 'thickness_form':thickness_form,'unit_form':unit_form})

def results(request):
    stdlogger.info("Call to results view")
    outfiles_list = {}
    outplots_list = {}
    outfiledir = ""
    outplotdir= ""

    if ('userdir' in request.session):
        # Prep the info we need
        outdir = "/media/userdirs/"+ request.session['userdir']
        outfiledir = outdir+"/Results/"
        outplotdir = outdir+"/Plots/"

        stdlogger.info("About to call ROOT macro wrapper")
        sp.call("$G4EMMA_ROOT_MACRO_WRAPPER_PATH "+request.session['userdir_path'], shell=True)

        #get a list of the generated output files
        outfiles = str(sp.check_output("ls -l "+ request.session['userdir_path'] +"/Results/ | awk '{print $9;}'", shell=True, universal_newlines=True))
        outplots = str(sp.check_output("ls -l "+ request.session['userdir_path'] +"/Plots/ | awk '{print $9;}'", shell=True, universal_newlines=True))

        # make a list from that command's output
        outfiles_list = outfiles.strip().splitlines()
        outplots_list = outplots.strip().splitlines()

        # Clear the session (leftover stuff is interpreted as indication of
        # a sim error if the user goes back to the simulation page)
        request.session.clear()

    return render(request, 'g4emma/results.html',
        {'outfiledir': outfiledir, 'outplotdir':outplotdir,
         'outfiles': outfiles_list, 'outplots': outplots_list})


def progress(request):
    # Make sure the user should be getting this page
    if ('userdir_path' in request.session):
        # Fetch number of events from the user input
        num_events = 0
        with open(request.session['userdir_path']+"/UserInput/beam.dat", 'r') as f:
            # should be the first token on the first line
            num_events = int(f.readline().split()[0])

        z2 = ""
        a2 = ""
        # Number of events also depends on whether there is a rxn specified
        with open(request.session['userdir_path']+"/UserInput/reaction.dat", 'r') as f:
            # should be the first token on the first line
            f.readline() # top comment
            f.readline() # z1
            f.readline() # a1
            z2 = f.readline().split()[0]
            a2 = f.readline().split()[0]

        # If there is a rxn, we have 3 sets of events: do beam, do prepare, and do rxn
        if (z2 != "0" or a2 != "0"):
            # I don't know if this is the logic they meant to express but
            # I'm mirroring what's in the simulation app so it's consistent
            num_events *= 3

        return render(request, 'g4emma/progress.html', { 'num_events': num_events})

    # The user shouldn't be accessing this page
    else:
        # So send them elsewhere
        return redirect('simulation')
